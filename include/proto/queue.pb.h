// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: queue.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_queue_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_queue_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_queue_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_queue_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_queue_2eproto;
namespace efesx {
namespace queue {
namespace detail {
namespace proto {
class QueueStorage;
struct QueueStorageDefaultTypeInternal;
extern QueueStorageDefaultTypeInternal _QueueStorage_default_instance_;
class QueueStorageNode;
struct QueueStorageNodeDefaultTypeInternal;
extern QueueStorageNodeDefaultTypeInternal _QueueStorageNode_default_instance_;
}  // namespace proto
}  // namespace detail
}  // namespace queue
}  // namespace efesx
PROTOBUF_NAMESPACE_OPEN
template<> ::efesx::queue::detail::proto::QueueStorage* Arena::CreateMaybeMessage<::efesx::queue::detail::proto::QueueStorage>(Arena*);
template<> ::efesx::queue::detail::proto::QueueStorageNode* Arena::CreateMaybeMessage<::efesx::queue::detail::proto::QueueStorageNode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace efesx {
namespace queue {
namespace detail {
namespace proto {

// ===================================================================

class QueueStorageNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:efesx.queue.detail.proto.QueueStorageNode) */ {
 public:
  inline QueueStorageNode() : QueueStorageNode(nullptr) {}
  ~QueueStorageNode() override;
  explicit PROTOBUF_CONSTEXPR QueueStorageNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueueStorageNode(const QueueStorageNode& from);
  QueueStorageNode(QueueStorageNode&& from) noexcept
    : QueueStorageNode() {
    *this = ::std::move(from);
  }

  inline QueueStorageNode& operator=(const QueueStorageNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueStorageNode& operator=(QueueStorageNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueueStorageNode& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kDoubleValue = 2,
    kFloatValue = 3,
    kSint32Value = 4,
    kSint64Value = 5,
    kUint32Value = 6,
    kUint64Value = 7,
    kBoolValue = 8,
    kStringValue = 9,
    kRawData = 10,
    DATA_NOT_SET = 0,
  };

  static inline const QueueStorageNode* internal_default_instance() {
    return reinterpret_cast<const QueueStorageNode*>(
               &_QueueStorageNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueueStorageNode& a, QueueStorageNode& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueStorageNode* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueStorageNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueueStorageNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueueStorageNode>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueueStorageNode& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueueStorageNode& from) {
    QueueStorageNode::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueStorageNode* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "efesx.queue.detail.proto.QueueStorageNode";
  }
  protected:
  explicit QueueStorageNode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedAtFieldNumber = 11,
    kPriorityFieldNumber = 1,
    kDoubleValueFieldNumber = 2,
    kFloatValueFieldNumber = 3,
    kSint32ValueFieldNumber = 4,
    kSint64ValueFieldNumber = 5,
    kUint32ValueFieldNumber = 6,
    kUint64ValueFieldNumber = 7,
    kBoolValueFieldNumber = 8,
    kStringValueFieldNumber = 9,
    kRawDataFieldNumber = 10,
  };
  // .google.protobuf.Timestamp created_at = 11;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // int32 priority = 1;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // double double_value = 2;
  bool has_double_value() const;
  private:
  bool _internal_has_double_value() const;
  public:
  void clear_double_value();
  double double_value() const;
  void set_double_value(double value);
  private:
  double _internal_double_value() const;
  void _internal_set_double_value(double value);
  public:

  // float float_value = 3;
  bool has_float_value() const;
  private:
  bool _internal_has_float_value() const;
  public:
  void clear_float_value();
  float float_value() const;
  void set_float_value(float value);
  private:
  float _internal_float_value() const;
  void _internal_set_float_value(float value);
  public:

  // sint32 sint32_value = 4;
  bool has_sint32_value() const;
  private:
  bool _internal_has_sint32_value() const;
  public:
  void clear_sint32_value();
  int32_t sint32_value() const;
  void set_sint32_value(int32_t value);
  private:
  int32_t _internal_sint32_value() const;
  void _internal_set_sint32_value(int32_t value);
  public:

  // sint64 sint64_value = 5;
  bool has_sint64_value() const;
  private:
  bool _internal_has_sint64_value() const;
  public:
  void clear_sint64_value();
  int64_t sint64_value() const;
  void set_sint64_value(int64_t value);
  private:
  int64_t _internal_sint64_value() const;
  void _internal_set_sint64_value(int64_t value);
  public:

  // uint32 uint32_value = 6;
  bool has_uint32_value() const;
  private:
  bool _internal_has_uint32_value() const;
  public:
  void clear_uint32_value();
  uint32_t uint32_value() const;
  void set_uint32_value(uint32_t value);
  private:
  uint32_t _internal_uint32_value() const;
  void _internal_set_uint32_value(uint32_t value);
  public:

  // uint64 uint64_value = 7;
  bool has_uint64_value() const;
  private:
  bool _internal_has_uint64_value() const;
  public:
  void clear_uint64_value();
  uint64_t uint64_value() const;
  void set_uint64_value(uint64_t value);
  private:
  uint64_t _internal_uint64_value() const;
  void _internal_set_uint64_value(uint64_t value);
  public:

  // bool bool_value = 8;
  bool has_bool_value() const;
  private:
  bool _internal_has_bool_value() const;
  public:
  void clear_bool_value();
  bool bool_value() const;
  void set_bool_value(bool value);
  private:
  bool _internal_bool_value() const;
  void _internal_set_bool_value(bool value);
  public:

  // string string_value = 9;
  bool has_string_value() const;
  private:
  bool _internal_has_string_value() const;
  public:
  void clear_string_value();
  const std::string& string_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_string_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_string_value();
  PROTOBUF_NODISCARD std::string* release_string_value();
  void set_allocated_string_value(std::string* string_value);
  private:
  const std::string& _internal_string_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_string_value(const std::string& value);
  std::string* _internal_mutable_string_value();
  public:

  // bytes raw_data = 10;
  bool has_raw_data() const;
  private:
  bool _internal_has_raw_data() const;
  public:
  void clear_raw_data();
  const std::string& raw_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_raw_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_raw_data();
  PROTOBUF_NODISCARD std::string* release_raw_data();
  void set_allocated_raw_data(std::string* raw_data);
  private:
  const std::string& _internal_raw_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_raw_data(const std::string& value);
  std::string* _internal_mutable_raw_data();
  public:

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:efesx.queue.detail.proto.QueueStorageNode)
 private:
  class _Internal;
  void set_has_double_value();
  void set_has_float_value();
  void set_has_sint32_value();
  void set_has_sint64_value();
  void set_has_uint32_value();
  void set_has_uint64_value();
  void set_has_bool_value();
  void set_has_string_value();
  void set_has_raw_data();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
    int32_t priority_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      double double_value_;
      float float_value_;
      int32_t sint32_value_;
      int64_t sint64_value_;
      uint32_t uint32_value_;
      uint64_t uint64_value_;
      bool bool_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_value_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_data_;
    } data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_queue_2eproto;
};
// -------------------------------------------------------------------

class QueueStorage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:efesx.queue.detail.proto.QueueStorage) */ {
 public:
  inline QueueStorage() : QueueStorage(nullptr) {}
  ~QueueStorage() override;
  explicit PROTOBUF_CONSTEXPR QueueStorage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QueueStorage(const QueueStorage& from);
  QueueStorage(QueueStorage&& from) noexcept
    : QueueStorage() {
    *this = ::std::move(from);
  }

  inline QueueStorage& operator=(const QueueStorage& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueueStorage& operator=(QueueStorage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QueueStorage& default_instance() {
    return *internal_default_instance();
  }
  static inline const QueueStorage* internal_default_instance() {
    return reinterpret_cast<const QueueStorage*>(
               &_QueueStorage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(QueueStorage& a, QueueStorage& b) {
    a.Swap(&b);
  }
  inline void Swap(QueueStorage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QueueStorage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QueueStorage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QueueStorage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QueueStorage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const QueueStorage& from) {
    QueueStorage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueueStorage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "efesx.queue.detail.proto.QueueStorage";
  }
  protected:
  explicit QueueStorage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // repeated .efesx.queue.detail.proto.QueueStorageNode node = 1;
  int node_size() const;
  private:
  int _internal_node_size() const;
  public:
  void clear_node();
  ::efesx::queue::detail::proto::QueueStorageNode* mutable_node(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::efesx::queue::detail::proto::QueueStorageNode >*
      mutable_node();
  private:
  const ::efesx::queue::detail::proto::QueueStorageNode& _internal_node(int index) const;
  ::efesx::queue::detail::proto::QueueStorageNode* _internal_add_node();
  public:
  const ::efesx::queue::detail::proto::QueueStorageNode& node(int index) const;
  ::efesx::queue::detail::proto::QueueStorageNode* add_node();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::efesx::queue::detail::proto::QueueStorageNode >&
      node() const;

  // @@protoc_insertion_point(class_scope:efesx.queue.detail.proto.QueueStorage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::efesx::queue::detail::proto::QueueStorageNode > node_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_queue_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueueStorageNode

// int32 priority = 1;
inline void QueueStorageNode::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t QueueStorageNode::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t QueueStorageNode::priority() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.priority)
  return _internal_priority();
}
inline void QueueStorageNode::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void QueueStorageNode::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.priority)
}

// double double_value = 2;
inline bool QueueStorageNode::_internal_has_double_value() const {
  return data_case() == kDoubleValue;
}
inline bool QueueStorageNode::has_double_value() const {
  return _internal_has_double_value();
}
inline void QueueStorageNode::set_has_double_value() {
  _impl_._oneof_case_[0] = kDoubleValue;
}
inline void QueueStorageNode::clear_double_value() {
  if (_internal_has_double_value()) {
    _impl_.data_.double_value_ = 0;
    clear_has_data();
  }
}
inline double QueueStorageNode::_internal_double_value() const {
  if (_internal_has_double_value()) {
    return _impl_.data_.double_value_;
  }
  return 0;
}
inline void QueueStorageNode::_internal_set_double_value(double value) {
  if (!_internal_has_double_value()) {
    clear_data();
    set_has_double_value();
  }
  _impl_.data_.double_value_ = value;
}
inline double QueueStorageNode::double_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.double_value)
  return _internal_double_value();
}
inline void QueueStorageNode::set_double_value(double value) {
  _internal_set_double_value(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.double_value)
}

// float float_value = 3;
inline bool QueueStorageNode::_internal_has_float_value() const {
  return data_case() == kFloatValue;
}
inline bool QueueStorageNode::has_float_value() const {
  return _internal_has_float_value();
}
inline void QueueStorageNode::set_has_float_value() {
  _impl_._oneof_case_[0] = kFloatValue;
}
inline void QueueStorageNode::clear_float_value() {
  if (_internal_has_float_value()) {
    _impl_.data_.float_value_ = 0;
    clear_has_data();
  }
}
inline float QueueStorageNode::_internal_float_value() const {
  if (_internal_has_float_value()) {
    return _impl_.data_.float_value_;
  }
  return 0;
}
inline void QueueStorageNode::_internal_set_float_value(float value) {
  if (!_internal_has_float_value()) {
    clear_data();
    set_has_float_value();
  }
  _impl_.data_.float_value_ = value;
}
inline float QueueStorageNode::float_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.float_value)
  return _internal_float_value();
}
inline void QueueStorageNode::set_float_value(float value) {
  _internal_set_float_value(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.float_value)
}

// sint32 sint32_value = 4;
inline bool QueueStorageNode::_internal_has_sint32_value() const {
  return data_case() == kSint32Value;
}
inline bool QueueStorageNode::has_sint32_value() const {
  return _internal_has_sint32_value();
}
inline void QueueStorageNode::set_has_sint32_value() {
  _impl_._oneof_case_[0] = kSint32Value;
}
inline void QueueStorageNode::clear_sint32_value() {
  if (_internal_has_sint32_value()) {
    _impl_.data_.sint32_value_ = 0;
    clear_has_data();
  }
}
inline int32_t QueueStorageNode::_internal_sint32_value() const {
  if (_internal_has_sint32_value()) {
    return _impl_.data_.sint32_value_;
  }
  return 0;
}
inline void QueueStorageNode::_internal_set_sint32_value(int32_t value) {
  if (!_internal_has_sint32_value()) {
    clear_data();
    set_has_sint32_value();
  }
  _impl_.data_.sint32_value_ = value;
}
inline int32_t QueueStorageNode::sint32_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.sint32_value)
  return _internal_sint32_value();
}
inline void QueueStorageNode::set_sint32_value(int32_t value) {
  _internal_set_sint32_value(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.sint32_value)
}

// sint64 sint64_value = 5;
inline bool QueueStorageNode::_internal_has_sint64_value() const {
  return data_case() == kSint64Value;
}
inline bool QueueStorageNode::has_sint64_value() const {
  return _internal_has_sint64_value();
}
inline void QueueStorageNode::set_has_sint64_value() {
  _impl_._oneof_case_[0] = kSint64Value;
}
inline void QueueStorageNode::clear_sint64_value() {
  if (_internal_has_sint64_value()) {
    _impl_.data_.sint64_value_ = int64_t{0};
    clear_has_data();
  }
}
inline int64_t QueueStorageNode::_internal_sint64_value() const {
  if (_internal_has_sint64_value()) {
    return _impl_.data_.sint64_value_;
  }
  return int64_t{0};
}
inline void QueueStorageNode::_internal_set_sint64_value(int64_t value) {
  if (!_internal_has_sint64_value()) {
    clear_data();
    set_has_sint64_value();
  }
  _impl_.data_.sint64_value_ = value;
}
inline int64_t QueueStorageNode::sint64_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.sint64_value)
  return _internal_sint64_value();
}
inline void QueueStorageNode::set_sint64_value(int64_t value) {
  _internal_set_sint64_value(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.sint64_value)
}

// uint32 uint32_value = 6;
inline bool QueueStorageNode::_internal_has_uint32_value() const {
  return data_case() == kUint32Value;
}
inline bool QueueStorageNode::has_uint32_value() const {
  return _internal_has_uint32_value();
}
inline void QueueStorageNode::set_has_uint32_value() {
  _impl_._oneof_case_[0] = kUint32Value;
}
inline void QueueStorageNode::clear_uint32_value() {
  if (_internal_has_uint32_value()) {
    _impl_.data_.uint32_value_ = 0u;
    clear_has_data();
  }
}
inline uint32_t QueueStorageNode::_internal_uint32_value() const {
  if (_internal_has_uint32_value()) {
    return _impl_.data_.uint32_value_;
  }
  return 0u;
}
inline void QueueStorageNode::_internal_set_uint32_value(uint32_t value) {
  if (!_internal_has_uint32_value()) {
    clear_data();
    set_has_uint32_value();
  }
  _impl_.data_.uint32_value_ = value;
}
inline uint32_t QueueStorageNode::uint32_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.uint32_value)
  return _internal_uint32_value();
}
inline void QueueStorageNode::set_uint32_value(uint32_t value) {
  _internal_set_uint32_value(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.uint32_value)
}

// uint64 uint64_value = 7;
inline bool QueueStorageNode::_internal_has_uint64_value() const {
  return data_case() == kUint64Value;
}
inline bool QueueStorageNode::has_uint64_value() const {
  return _internal_has_uint64_value();
}
inline void QueueStorageNode::set_has_uint64_value() {
  _impl_._oneof_case_[0] = kUint64Value;
}
inline void QueueStorageNode::clear_uint64_value() {
  if (_internal_has_uint64_value()) {
    _impl_.data_.uint64_value_ = uint64_t{0u};
    clear_has_data();
  }
}
inline uint64_t QueueStorageNode::_internal_uint64_value() const {
  if (_internal_has_uint64_value()) {
    return _impl_.data_.uint64_value_;
  }
  return uint64_t{0u};
}
inline void QueueStorageNode::_internal_set_uint64_value(uint64_t value) {
  if (!_internal_has_uint64_value()) {
    clear_data();
    set_has_uint64_value();
  }
  _impl_.data_.uint64_value_ = value;
}
inline uint64_t QueueStorageNode::uint64_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.uint64_value)
  return _internal_uint64_value();
}
inline void QueueStorageNode::set_uint64_value(uint64_t value) {
  _internal_set_uint64_value(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.uint64_value)
}

// bool bool_value = 8;
inline bool QueueStorageNode::_internal_has_bool_value() const {
  return data_case() == kBoolValue;
}
inline bool QueueStorageNode::has_bool_value() const {
  return _internal_has_bool_value();
}
inline void QueueStorageNode::set_has_bool_value() {
  _impl_._oneof_case_[0] = kBoolValue;
}
inline void QueueStorageNode::clear_bool_value() {
  if (_internal_has_bool_value()) {
    _impl_.data_.bool_value_ = false;
    clear_has_data();
  }
}
inline bool QueueStorageNode::_internal_bool_value() const {
  if (_internal_has_bool_value()) {
    return _impl_.data_.bool_value_;
  }
  return false;
}
inline void QueueStorageNode::_internal_set_bool_value(bool value) {
  if (!_internal_has_bool_value()) {
    clear_data();
    set_has_bool_value();
  }
  _impl_.data_.bool_value_ = value;
}
inline bool QueueStorageNode::bool_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.bool_value)
  return _internal_bool_value();
}
inline void QueueStorageNode::set_bool_value(bool value) {
  _internal_set_bool_value(value);
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.bool_value)
}

// string string_value = 9;
inline bool QueueStorageNode::_internal_has_string_value() const {
  return data_case() == kStringValue;
}
inline bool QueueStorageNode::has_string_value() const {
  return _internal_has_string_value();
}
inline void QueueStorageNode::set_has_string_value() {
  _impl_._oneof_case_[0] = kStringValue;
}
inline void QueueStorageNode::clear_string_value() {
  if (_internal_has_string_value()) {
    _impl_.data_.string_value_.Destroy();
    clear_has_data();
  }
}
inline const std::string& QueueStorageNode::string_value() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.string_value)
  return _internal_string_value();
}
template <typename ArgT0, typename... ArgT>
inline void QueueStorageNode::set_string_value(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_string_value()) {
    clear_data();
    set_has_string_value();
    _impl_.data_.string_value_.InitDefault();
  }
  _impl_.data_.string_value_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.string_value)
}
inline std::string* QueueStorageNode::mutable_string_value() {
  std::string* _s = _internal_mutable_string_value();
  // @@protoc_insertion_point(field_mutable:efesx.queue.detail.proto.QueueStorageNode.string_value)
  return _s;
}
inline const std::string& QueueStorageNode::_internal_string_value() const {
  if (_internal_has_string_value()) {
    return _impl_.data_.string_value_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void QueueStorageNode::_internal_set_string_value(const std::string& value) {
  if (!_internal_has_string_value()) {
    clear_data();
    set_has_string_value();
    _impl_.data_.string_value_.InitDefault();
  }
  _impl_.data_.string_value_.Set(value, GetArenaForAllocation());
}
inline std::string* QueueStorageNode::_internal_mutable_string_value() {
  if (!_internal_has_string_value()) {
    clear_data();
    set_has_string_value();
    _impl_.data_.string_value_.InitDefault();
  }
  return _impl_.data_.string_value_.Mutable(      GetArenaForAllocation());
}
inline std::string* QueueStorageNode::release_string_value() {
  // @@protoc_insertion_point(field_release:efesx.queue.detail.proto.QueueStorageNode.string_value)
  if (_internal_has_string_value()) {
    clear_has_data();
    return _impl_.data_.string_value_.Release();
  } else {
    return nullptr;
  }
}
inline void QueueStorageNode::set_allocated_string_value(std::string* string_value) {
  if (has_data()) {
    clear_data();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    _impl_.data_.string_value_.InitAllocated(string_value, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:efesx.queue.detail.proto.QueueStorageNode.string_value)
}

// bytes raw_data = 10;
inline bool QueueStorageNode::_internal_has_raw_data() const {
  return data_case() == kRawData;
}
inline bool QueueStorageNode::has_raw_data() const {
  return _internal_has_raw_data();
}
inline void QueueStorageNode::set_has_raw_data() {
  _impl_._oneof_case_[0] = kRawData;
}
inline void QueueStorageNode::clear_raw_data() {
  if (_internal_has_raw_data()) {
    _impl_.data_.raw_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& QueueStorageNode::raw_data() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.raw_data)
  return _internal_raw_data();
}
template <typename ArgT0, typename... ArgT>
inline void QueueStorageNode::set_raw_data(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_raw_data()) {
    clear_data();
    set_has_raw_data();
    _impl_.data_.raw_data_.InitDefault();
  }
  _impl_.data_.raw_data_.SetBytes( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:efesx.queue.detail.proto.QueueStorageNode.raw_data)
}
inline std::string* QueueStorageNode::mutable_raw_data() {
  std::string* _s = _internal_mutable_raw_data();
  // @@protoc_insertion_point(field_mutable:efesx.queue.detail.proto.QueueStorageNode.raw_data)
  return _s;
}
inline const std::string& QueueStorageNode::_internal_raw_data() const {
  if (_internal_has_raw_data()) {
    return _impl_.data_.raw_data_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void QueueStorageNode::_internal_set_raw_data(const std::string& value) {
  if (!_internal_has_raw_data()) {
    clear_data();
    set_has_raw_data();
    _impl_.data_.raw_data_.InitDefault();
  }
  _impl_.data_.raw_data_.Set(value, GetArenaForAllocation());
}
inline std::string* QueueStorageNode::_internal_mutable_raw_data() {
  if (!_internal_has_raw_data()) {
    clear_data();
    set_has_raw_data();
    _impl_.data_.raw_data_.InitDefault();
  }
  return _impl_.data_.raw_data_.Mutable(      GetArenaForAllocation());
}
inline std::string* QueueStorageNode::release_raw_data() {
  // @@protoc_insertion_point(field_release:efesx.queue.detail.proto.QueueStorageNode.raw_data)
  if (_internal_has_raw_data()) {
    clear_has_data();
    return _impl_.data_.raw_data_.Release();
  } else {
    return nullptr;
  }
}
inline void QueueStorageNode::set_allocated_raw_data(std::string* raw_data) {
  if (has_data()) {
    clear_data();
  }
  if (raw_data != nullptr) {
    set_has_raw_data();
    _impl_.data_.raw_data_.InitAllocated(raw_data, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:efesx.queue.detail.proto.QueueStorageNode.raw_data)
}

// .google.protobuf.Timestamp created_at = 11;
inline bool QueueStorageNode::_internal_has_created_at() const {
  return this != internal_default_instance() && _impl_.created_at_ != nullptr;
}
inline bool QueueStorageNode::has_created_at() const {
  return _internal_has_created_at();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& QueueStorageNode::_internal_created_at() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.created_at_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& QueueStorageNode::created_at() const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorageNode.created_at)
  return _internal_created_at();
}
inline void QueueStorageNode::unsafe_arena_set_allocated_created_at(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  _impl_.created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:efesx.queue.detail.proto.QueueStorageNode.created_at)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* QueueStorageNode::release_created_at() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* QueueStorageNode::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:efesx.queue.detail.proto.QueueStorageNode.created_at)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.created_at_;
  _impl_.created_at_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* QueueStorageNode::_internal_mutable_created_at() {
  
  if (_impl_.created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.created_at_ = p;
  }
  return _impl_.created_at_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* QueueStorageNode::mutable_created_at() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created_at();
  // @@protoc_insertion_point(field_mutable:efesx.queue.detail.proto.QueueStorageNode.created_at)
  return _msg;
}
inline void QueueStorageNode::set_allocated_created_at(::PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at));
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:efesx.queue.detail.proto.QueueStorageNode.created_at)
}

inline bool QueueStorageNode::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void QueueStorageNode::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline QueueStorageNode::DataCase QueueStorageNode::data_case() const {
  return QueueStorageNode::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// QueueStorage

// repeated .efesx.queue.detail.proto.QueueStorageNode node = 1;
inline int QueueStorage::_internal_node_size() const {
  return _impl_.node_.size();
}
inline int QueueStorage::node_size() const {
  return _internal_node_size();
}
inline void QueueStorage::clear_node() {
  _impl_.node_.Clear();
}
inline ::efesx::queue::detail::proto::QueueStorageNode* QueueStorage::mutable_node(int index) {
  // @@protoc_insertion_point(field_mutable:efesx.queue.detail.proto.QueueStorage.node)
  return _impl_.node_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::efesx::queue::detail::proto::QueueStorageNode >*
QueueStorage::mutable_node() {
  // @@protoc_insertion_point(field_mutable_list:efesx.queue.detail.proto.QueueStorage.node)
  return &_impl_.node_;
}
inline const ::efesx::queue::detail::proto::QueueStorageNode& QueueStorage::_internal_node(int index) const {
  return _impl_.node_.Get(index);
}
inline const ::efesx::queue::detail::proto::QueueStorageNode& QueueStorage::node(int index) const {
  // @@protoc_insertion_point(field_get:efesx.queue.detail.proto.QueueStorage.node)
  return _internal_node(index);
}
inline ::efesx::queue::detail::proto::QueueStorageNode* QueueStorage::_internal_add_node() {
  return _impl_.node_.Add();
}
inline ::efesx::queue::detail::proto::QueueStorageNode* QueueStorage::add_node() {
  ::efesx::queue::detail::proto::QueueStorageNode* _add = _internal_add_node();
  // @@protoc_insertion_point(field_add:efesx.queue.detail.proto.QueueStorage.node)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::efesx::queue::detail::proto::QueueStorageNode >&
QueueStorage::node() const {
  // @@protoc_insertion_point(field_list:efesx.queue.detail.proto.QueueStorage.node)
  return _impl_.node_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace detail
}  // namespace queue
}  // namespace efesx

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_queue_2eproto
